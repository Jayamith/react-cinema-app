# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  build:
    docker:
      - image: cimg/node:17.0.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CURRENT_BRANCH}
      - restore_cache:
          keys:
            - app-{{ checksum "package.json" }}
            - app-
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: app-{{ checksum "package.json" }}

  deploy-to-aws-s3:
    docker:
      - image: cimg/node:17.0.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CURRENT_BRANCH}
      - run:
          name: Installing AWS CLI
          working_directory: /
          command:
            sudo apt-get -y -qq update
            sudo apt-get install -y python-pip python-dev build-essential
            sudo apt-get install -y awscli
      - run:
          name: Build Project
          command:
            npm install
            npm run build
            cd build
            zip ../build.zip -r * .[^.]*
            echo "Build Successful"
      - run:
          name: Deploy to AWS S3
          command:
            if [ "${CURRENT_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_PRODUCTION_BUCKET} --delete
            elif [ "${CURRENT_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_STAGING_BUCKET} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_DEV_BUCKET} --delete
            fi

  deploy-to-aws-cloudfront:
    docker:
      - image: circleci/node:14.16.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CURRENT_BRANCH}
      - run:
          name: Installing AWS CLI
          working_directory: /
          command:
            AWS_VER_REGEXP_2='aws-cli\/2.\d*.\d*'

            AWS_VER_REGEXP_1='aws-cli\/1.\d*.\d*'

            # initialize installed version to zero, to signify not installed (Or we
            want to ignore the installed version and re-install).

            AWS_CLI_INSTALLED_VERSION="0"

            AWS_CLI_VERSION_SELECTED="<<parameters.version>>"


            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi


            if [ "<<parameters.skip-install-check>>" == "false" ]; then
            if ! command -v aws --version >/dev/null 2>&1  ; then
            echo AWS is not installed
            else
            echo AWS is currently installed.
            if aws --version 2>&1 | grep -q $AWS_VER_REGEXP_2; then
            echo AWS CLI v2 is installed
            AWS_CLI_INSTALLED_VERSION="2"
            fi
            if aws --version 2>&1 | grep -q $AWS_VER_REGEXP_1; then
            echo AWS CLI v1 is installed
            AWS_CLI_INSTALLED_VERSION="1"
            fi
            fi
            else
            echo "Skipping version check. Installing CLI"
            fi


            AWS_V2_UPDATE_PARAM=""

            if aws --version 2>&1 | grep -q $AWS_VER_REGEXP_2; then
            AWS_V2_UPDATE_PARAM="--update"
            fi


            #If the desired version of the CLI is not installed, install it.

            if [[ $AWS_CLI_VERSION_SELECTED != $AWS_CLI_INSTALLED_VERSION ]]; then

            #uninstall AWS CLI if it is installed.
            if which aws; then
            echo Uninstalling old CLI
            $SUDO rm -rf $(which aws)
            fi
            case $AWS_CLI_VERSION_SELECTED in
            "1")
            if ! command -v python >/dev/null 2>&1 && ! command -v python3 >/dev/null 2>&1 ; then
            echo "Your environment does not seem to have Python installed, a requirement of the AWS CLI."
            echo "Please either utilize the AWS CLI v2, or select an envionment with Python installed."
            echo "Recommended image: cimg:/python:3.8"
            exit 1
            fi
            # install CLI v1
            export PIP=$(which pip pip3 | head -1)
            if [[ -n "${PIP:-}" ]]; then
            if which sudo > /dev/null; then
            sudo $PIP install awscli --upgrade
            else
            # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
            $PIP install awscli --upgrade --user
            fi
            elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
            cd
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip -q awscli-bundle.zip
            if which sudo > /dev/null; then
            sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            else
            # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
            awscli-bundle/install -b ~/bin/aws
            fi
            rm -rf awscli-bundle*
            cd -
            else
            echo "Unable to install AWS CLI. Please install pip."
            exit 1
            fi
            # Installation check
            if aws --version &> grep -q "aws-cli/1"; then
            echo "AWS CLI V1 has been installed successfully"
            exit 0
            else
            echo "There was an issue installing the AWS CLI V1. Exiting."
            exit 1
            fi
            ;;
            "2")
      - run:
          name: Build Project
          command:
            npm install
            npm run build
            cd build
            zip ../build.zip -r * .[^.]*
            echo "Build Successful"
      - run:
          name: Deploy to AWS Cloudfront
          command:
            aws configure set preview.cloudfront
            if [ "${CURRENT_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${PRODUCTION_DISTRIBUTING_ID} --paths /\*
            elif [ "${CURRENT_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${DEV_DISTRIBUTION_ID} --paths /\*
            fi

workflows:
  build_and_deploy:
    jobs:
      - build
      - deploy-to-aws-s3:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master
